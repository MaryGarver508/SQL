/* #1. How many orders were placed in January? */

SELECT COUNT(orderid)
FROM BIT_DB.JanSales
WHERE length(orderid) = 6 
AND orderid <> 'Order ID'

/* #2. How many of those orders were for an iPhone? */

SELECT COUNT(orderid)
FROM BIT_DB.JanSales
WHERE Product='iPhone'
AND length(orderid) = 6 
AND orderid <> 'Order ID'

/* #3. Select the customer account numbers for all the orders that were placed in February. */

SELECT distinct acctnum
FROM BIT_DB.customers cust
INNER JOIN BIT_DB.FebSales Feb
ON cust.order_id=FEB.orderid
WHERE length(orderid) = 6 
AND orderid <> 'Order ID'

/* #4. Which product was the cheapest one sold in January, and what was the price? */

SELECT distinct product, price FROM BIT_DB.JanSales 
ORDER BY price ASC LIMIT 1

/* #5. What is the total revenue for each product sold in January? */

SELECT 
SUM(quantity)*price as revenue, product
FROM BIT_DB.JanSales
GROUP BY product

/* #6. Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue? */

SELECT SUM(Quantity), product, 
SUM(quantity)*price as revenue
FROM BIT_DB.FebSales 
WHERE location = '548 Lincoln St, Seattle, WA 98101'
GROUP BY product

/* #7. How many customers ordered more than 2 products at a time, and what was the average amount spent for those customers? */ 

SELECT count(distinct cust.acctnum), 
AVG(quantity*price)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id
WHERE Feb.Quantity>2
AND length(orderid) = 6 
AND orderid <> 'Order ID'

/* #8. List all the products sold in Los Angeles in February, and include how many of each were sold. */

SELECT Product, SUM(quantity)
FROM Bit_DB.FebSales
WHERE location LIKE "%Los Angeles%"
GROUP BY Product;

/* #9. Which locations in New York received at least 3 orders in January, and how many orders did they each receive? */

SELECT distinct location, count(orderID)
From Bit_DB.JanSales
WHERE location like '%NY%'
    AND length(orderid)=6
    AND orderID <> 'orderID'
GROUP BY location
HAVING count(orderID)>=3;

/* #10. How many of each type of headphone were sold in February? */

SELECT Product, sum(quantity) as quantity
FROM BIT_DB.FebSales
WHERE Product like '%headphones%'
GROUP BY Product

/* #11. What was the average amount spent per account in February? */

SELECT
SUM(quantity*price)/count(customers.acctnum) as average
FROM BIT_DB.FebSales
LEFT JOIN BIT_DB.customers
ON FebSales.orderID=customers.order_id
WHERE orderID <> 'orderID'
AND length(orderID)=6

/* 12. What was the average quantity of products purchased per account in February? */

SELECT
SUM(quantity)/count(customers.acctnum) as average
FROM BIT_DB.FebSales
LEFT JOIN BIT_DB.customers
ON FebSales.orderID=customers.order_id
WHERE orderID <> 'orderID'
AND length(orderID)=6

/* 13. Which product brought in the most revenue in January and how much revenue did it bring in total? */

SELECT product, 
SUM(quantity*price) as revenue
FROM BIT_DB.JanSales
GROUP BY product 
ORDER BY sum(quantity*price) desc
LIMIT 10

/* SPOTIFY DATA */

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )

SELECT * FROM Spotifydata

/* Spotify #1. What is the average danceability by artist and track? */
Select artist_name, track_name, 
AVG(danceability)
FROM BIT_DB.Spotifydata
GROUP BY artist_name, track_name

/* Spotify #2. Who is the top artist based on popularity? */

SELECT artist_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity desc
LIMIT 1

/* Spotify #3. 
A.) Calculate the average popularity for the artists in the Spotify data table. 
B. ) For every artist with an average popularity of 90 or above, show their name, their average popularity, and label them as a “Top Star”. */

WITH popularity_average_CTE AS (
    SELECT s.artist_name, 
    AVG(s.popularity) AS average_popularity
    FROM Spotifydata s
    GROUP BY s.artist_name)

SELECT artist_name, average_popularity, 'Top Star' as tag
FROM popularity_average_CTE
WHERE average_popularity>=90;

/* City Bike Lanes Table */

CREATE TABLE BIT_DB.CityBikeLanes (
id integer primary key,
year_installed year not null,
year_updated year not null,
street varchar not null,
width_feet integer not null,
safetyrating integer not null,
protected varchar not null)

INSERT INTO BIT_DB.CityBikeLanes values(1,2012, 2020, "Chestnut",4,4,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(2,2016, 2020,"Walnut",4,3.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(3,2011, 2020, "Market", 3.5, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(4,2008, 2020,"Locust",4,5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(5,2002, 2020,"South",4.5,4.3,"no");
INSERT INTO BIT_DB.CityBikeLanes values(6,2012, 2021, "18th",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(7,2016, 2021,"2nd",4,3.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(8,2011, 2021, "Lombard", 3.5, 2.2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(9,2008, 2021,"Pine",4,4.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(10,2002, 2021,"Tasker",4.5,4.8,"no");
INSERT INTO BIT_DB.CityBikeLanes values(11,2012, 2020, "Earp",4,4.1,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(12,2016, 2020,"Titan",4,3.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(13,2011, 2020, "Manning", 3.4, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(14,2008, 2020,"Fieldcrest",4,4.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(15,2002, 2020,"York",4.5,4.5,"no");
INSERT INTO BIT_DB.CityBikeLanes values(16,2012, 2021, "Race",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(17,2016, 2021,"Museum",4,3.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(18,2011, 2021, "Altin", 3.5, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(19,2008, 2021,"Fred",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(20,2002, 2021,"Morris",4.5,4.7,"no");
INSERT INTO BIT_DB.CityBikeLanes values(21,2012, 2020, "Jameson",4,3.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(22,2016, 2020,"MLK",4,3.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(23,2011, 2020, "Parker", 3.6, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(24,2008, 2020,"Thomas",4,4.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(25,2002, 2020,"Running",4.5,4.3,"no");
INSERT INTO BIT_DB.CityBikeLanes values(26,2012, 2021, "Waverly",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(27,2016, 2021,"Addison",4,3.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(28,2011, 2021, "Beaver", 3.5, 2.1, "no");
INSERT INTO BIT_DB.CityBikeLanes values(29,2008, 2021,"Kensington",4,5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(30,2002, 2021,"Mouse",4.5,4.5,"no");
INSERT INTO BIT_DB.CityBikeLanes values(31,2012, 2020, "Chestnut",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(32,2016, 2020,"Walnut",4,3.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(33,2011, 2020, "Market", 3.8, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(34,2008, 2020,"Locust",4,4.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(35,2002, 2020,"South",4.5,4.7,"no");
INSERT INTO BIT_DB.CityBikeLanes values(36,2012, 2021, "18th",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(37,2016, 2021,"2nd",4,3.2,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(38,2011, 2021, "Lombard", 3.5, 2.5, "no");
INSERT INTO BIT_DB.CityBikeLanes values(39,2008, 2021,"Pine",4,5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(40,2002, 2021,"Tasker",4.5,4.3,"no");
INSERT INTO BIT_DB.CityBikeLanes values(41,2012, 2020, "Earp",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(42,2016, 2020,"Titan",4,3.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(43,2011, 2020, "Manning", 3.4, 2.7, "no");
INSERT INTO BIT_DB.CityBikeLanes values(44,2008, 2020,"Fieldcrest",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(45,2002, 2020,"York",4.5,4.4,"no");
INSERT INTO BIT_DB.CityBikeLanes values(46,2012, 2021, "Race",4,4.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(47,2016, 2021,"Museum",4,3.4,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(48,2011, 2021, "Altin", 3.7, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(49,2008, 2021,"Fred",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(50,2002, 2021,"Morris",4.5,4.4,"no");
INSERT INTO BIT_DB.CityBikeLanes values(51,2012, 2020, "Jameson",4,4,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(52,2016, 2020,"MLK",4,4,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(53,2011, 2020, "Parker", 3.6, 2.3, "no");
INSERT INTO BIT_DB.CityBikeLanes values(54,2008, 2020,"Thomas",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(55,2002, 2020,"Running",4.5,4.5,"no");
INSERT INTO BIT_DB.CityBikeLanes values(56,2012, 2021, "Waverly",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(57,2016, 2021,"Addison",4,3.6,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(58,2011, 2021, "Beaver", 3.5, 2.5, "no");
INSERT INTO BIT_DB.CityBikeLanes values(59,2008, 2021,"Kensington",4,4.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(60,2002, 2021,"Mouse",4.5,4.3,"no");

/* Using a CTE, provide a list of all the bike lanes that have an average safety rating of 4.0 or higher. 
Show the average safety rating for each of those bike lanes, and a label that says "Safe Lane". */

WITH safety_average_cte AS (
    SELECT street, AVG(safetyrating) as 'rating'
    FROM citybikelanes
    GROUP BY street)

SELECT street, rating, 'safe lane' as 'label'
FROM safety_average_cte
WHERE rating >=4

SELECT street, safetyrating,
AVG(safetyrating) OVER (PARTITION BY street) as "Average_safety_rating",
FROM CityBikeLanes
SELECT safetyrating, 
CLAUS
WHEN safetyrating >= 4 THEN "Leave As-Is"
WHEN safetyrating < 2.5 THEN "Remove"
WHEN safetyrating > 2.5 AND < 4 THEN "Improvements Needed"
ELSE "Remove"
END 'recommendation'

SELECT street, safetyrating,
AVG(safetyrating) OVER (PARTITION BY street) as "Average_safety_rating",
CASE
    WHEN AVG(safetyrating) OVER (PARTITION BY safetyrating) >= 4 THEN "Leave As-Is"
    WHEN AVG(safetyrating) OVER (PARTITION BY safetyrating) <2.5 THEN "Remove"
    ELSE "Improvements Needed"
    END AS 'recommendation'
FROM CityBikeLanes

/* CHINOOK */
/* #1. Show Customers (their full names, customer ID, and country) who are not in the US. 

SELECT FirstName, LastName, CustomerID, Country
FROM chinook.customers
WHERE Country <> 'USA';

/* #2. Find the Invoices of customers who are from Brazil. */

SELECT *
FROM chinook.customers 
WHERE Country = "Brazil" ;

/* #3. The resulting table should show the customer's full name, Invoice ID, Date of the invoice, and billing country. */

SELECT cust.FirstName, cust.LastName, inv.InvoiceID, inv.InvoiceDate, inv.BillingCountry 
FROM chinook.customers as cust
    JOIN chinook.invoices as inv
    ON cust.CustomerId = Inv.CustomerID
WHERE inv.BillingCountry = "Brazil";

/* #4. Show the Employees who are Sales Agents.*/

SELECT * 
FROM chinook.employees
WHERE Title = "Sales Support Agent";

/* #5. Find a unique/distinct list of billing countries from the Invoice table.*/

SELECT distinct BillingCountry
FROM chinook.invoices;

/* #6. Provide a query that shows the invoices associated with each sales agent. The resulting table should include the Sales Agent's full name. */

SELECT emp.LastName, emp.FirstName, inv.InvoiceID
FROM chinook.employees as emp
    JOIN chinook.customers as cust
    ON emp.EmployeeID = cust.SupportRepID
    JOIN chinook.invoices as inv
    ON cust.CustomerID = inv.CustomerID

/* #7. Show the Invoice Total, Customer name, Billing Country, and Sales Agent name for all invoices and customers. */

SELECT inv.total, cust.LastName, cust.FirstName, inv.BillingCountry, emp.LastName, emp.FirstName
FROM chinook.Invoices as inv
    JOIN chinook.customers as cust
    ON inv.CustomerID = cust.CustomerID
    JOIN chinook.employees as emp
    ON emp.EmployeeID = cust.SupportRepID

/* #8. How many Invoices were there in 2009? */

SELECT COUNT(InvoiceID)
FROM chinook.invoices
WHERE invoices.InvoiceDate LIKE '%2009%'

/* #9. What are the total sales for 2009? */

SELECT SUM(Total)
FROM chinook.invoices
WHERE invoices.InvoiceDate LIKE '%2009%'

/* 10. Write a query that includes the purchased track name with each invoice line ID. */

SELECT tracks.Name, invoices.InvoiceID
FROM chinook.tracks
    JOIN chinook.invoices
    ON tracks.TrackID = invoices.InvoiceID

/* #11. Write a query that includes the purchased track name AND artist name with each invoice line ID. */

SELECT ii.InvoiceLineId, tr.Name, art.Name 
FROM chinook.invoice_items as ii
    JOIN chinook.tracks as tr
    ON ii.TrackID = tr.TrackId
        JOIN chinook.albums as alb
        ON alb.AlbumId = tr.AlbumId
            JOIN chinook.artists as art
            ON art.ArtistID = alb.ArtistID;
            
/* #12. Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre. */

SELECT t.name as 'Track_name', alb.title as 'Album_Title', mt.Name as 'Media_type', g.Name as 'Genre'
FROM chinook.tracks t
    JOIN chinook.Albums alb
    ON alb.Albumid = t.AlbumID 
        JOIN chinook.genres g
        ON t.GenreId = g.GenreID
          JOIN chinook.media_types mt
          ON t.MediatypeId = mt.MediaTypeID;

/* #13. Show the total number of sales made by each sales agent. */

SELECT emp.FirstName, emp.LastName,
ROUND(SUM(Inv.Total), 2) as 'Total Sales' 
FROM chinook.Employees emp
    JOIN chinook.Customers cust 
    ON cust.SupportRepId = emp.EmployeeId
        JOIN chinook.Invoices Inv 
        ON Inv.CustomerId = cust.CustomerId
WHERE emp.Title = 'Sales Support Agent' 
GROUP BY emp.FirstName;

/* #14. Which sales agent made the most dollars in sales in 2009? */

SELECT emp.FirstName, emp.LastName,
ROUND(SUM(Inv.Total), 2) as 'Total Sales' 
FROM chinook.Employees emp
    JOIN chinook.Customers cust 
    ON cust.SupportRepId = emp.EmployeeId
        JOIN chinook.Invoices Inv 
        ON Inv.CustomerId = cust.CustomerId
WHERE emp.Title = 'Sales Support Agent' 
GROUP BY emp.FirstName 
ORDER BY emp.title asc LIMIT 1;






